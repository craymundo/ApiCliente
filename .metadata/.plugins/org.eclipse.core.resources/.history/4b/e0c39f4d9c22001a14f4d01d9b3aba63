package com.example.controllers;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.persistence.Entity;

import org.springframework.http.MediaType;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.models.entity.Cliente;
import com.example.services.IClienteService;

@RestController
@RequestMapping("/api/clientes")
public class ClienteRestController {
	
	@Autowired
	private IClienteService clienteService;
	
	@GetMapping("")
	public List<Cliente> listar() {
		return clienteService.findAll();
	}
	
	@PostMapping("")
	@ResponseStatus(HttpStatus.CREATED)
	public Cliente crear(@RequestBody Cliente cliente) {
		return clienteService.save(cliente);
	}
	
	@GetMapping("/{id}")
	public Cliente obtenerPorId(@PathVariable Long id){
		return clienteService.findById(id);
	}
	
	@PutMapping("/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public Cliente actualizar(@RequestBody Cliente cliente, @PathVariable Long id){
		Cliente clienteActual = clienteService.findById(id);
		clienteActual.setNombre(cliente.getNombre());
		return clienteService.save(clienteActual);
	}
	
	@DeleteMapping("/{id}")
	public void eliminar(@PathVariable Long id){
		clienteService.delete(id);
	}
	
	
	@GetMapping("/promedio")
	public HashMap<String, Object> get() {
	    HashMap<String, Object> map = new HashMap<>();
	    map.put("promedio", clienteService.promedio());
	    map.put("clientes", clienteService.count());
	    return map;
	}
	
	@GetMapping("/desviacion")
	public HashMap<String, Object> desviacionEstandar() {
	    HashMap<String, Object> map = new HashMap<>();
	    //map.put("promedio", clienteService.promedio());
	    map.put("desviacionEstandar", clienteService.desviacionEstandar());
	    return map;
	}
	

	@GetMapping(value="/muerte")
	@ResponseBody public ResponseEntity<Object> getAll() throws JSONException {
	    List<Cliente> entityList = clienteService.findAll();
	    List<Object> entities = new ArrayList<Object>();
	    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-YYYY");
	    for (Cliente cliente : entityList) {
	    	HashMap mMap = new HashMap();
	    	mMap.put("id",cliente.getId());
	    	mMap.put("nombre",cliente.getNombre());
	    	mMap.put("apellido",cliente.getApellido());
	    	mMap.put("edad",cliente.getEdad());
	    	mMap.put("fnacimiento",simpleDateFormat.format(cliente.getFnacimiento()));
	    	Calendar cal = Calendar.getInstance();
	        cal.setTime(cliente.getFnacimiento());
	        cal.add(Calendar.YEAR, 74);
	        Date date = cal.getTime(); 
	    	mMap.put("fmuerte", simpleDateFormat.format(date));
	    	entities.add(mMap); 
	    }
	    return new ResponseEntity<Object>(entities, HttpStatus.OK);
	}
	

}
